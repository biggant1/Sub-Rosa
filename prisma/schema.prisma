generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Groups        Group[]   @relation("Group_members")
  OwnedGroups   Group[]   @relation("Group_owners")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Group {
  id      String   @id @default(cuid())
  name    String   @unique
  joinId  String   @unique @default(uuid())
  Report  Report[]
  members User[]   @relation("Group_members")
  owners  User[]   @relation("Group_owners")
}

model Report {
  id              String   @id @default(uuid())
  groupId         String
  title           String
  body            String
  approximateDate DateTime
  group           Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
}
